/**
 * A no-op JDBC implementation.
 * The driver supports URLs of the form {@code jdbc:noop[:xyz]}.
 * All parameters are ignored.
 *
 * Except for the {@link NoopDriver}, all classes are autogenerated from
 * the interfaces in {@link java.sql}.
 * For example {@link io.github.karstenspang.mockjdbc.noop.NoopConnection}
 * implements {@link java.sql.Connection}.
 * There is only one instance of each class.
 * 
 * The methods do nothing, except that non-void methods return a value.
 * The value returned depends on the type:
 * <ul>
 *  <li>For an interface in {@link java.sql}, the instance of the 
 *      corresponding no-op class (which can be wrapped).</li>
 *  <li>For any other object type, {@code null}.</li>
 *  <li>For numeric primitive types, the appropriate zero value.</li>
 *  <li>For boolean, {@code false}, except from the {@code wasNull}
 *      methods, which return {@code true}.</li>
 * </ul>
 * To be useful, the method calls should be mocked with suitable
 * {@link io.github.karstenspang.mockjdbc.WrapperStep},
 * {@link io.github.karstenspang.mockjdbc.ConstantStep},
 * {@link io.github.karstenspang.mockjdbc.ExceptionStep}, etc.
 */
package io.github.karstenspang.mockjdbc.noop;
